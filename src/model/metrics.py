"""
metrics.py is a module that aims to provide reusable functions 
to evaluate quality and characteristics of song lyrics within the 
contexts of our NLP-based lyric generation portion of the project.

These metrics were inspired by the research accomplished by
Harrison Gill, Daniel (Taesoo) Lee, and Nick Marwell.

Metrics included:
1. Average line length (in words)
2. Song word variation (unique words / total words)
3. Genre word variation (unique words per genre)
4. I vs. You Point-of-View measurement
5. Word repetition count
6. Cosine Similarity Test - a mathematical measure of how similar two vectors are, regardless of their magnitude (comparing real lyrics with generated lyrics)

These metrics provide standards to evaluate real lyrics from datasets
and lyrics generated by our model.
"""

import re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def average_line_length(lyrics):
    """
    Calculate the average number of words per line in a song.

    Args:
        lyrics (str): The full lyrics of a song with line breaks

    Returns: 
        float: Average number of words per non-empty line, 0 otherwise
    """
    # array of lines, remove end and start whitespace, break on endline char
    lines = lyrics.strip().split("\n")
    # length of line if line is not empty
    word_counts = [len(line.split()) for line in lines if line.strip()]
    # Sum of word counts over count of lines
    return sum(word_counts) / len(word_counts) if word_counts else 0


def song_word_variation(lyrics):
    """
    Calculate the word variation of a song, defined as unique words divided by total words.
    
    Args:
        lyrics (str): The full lyrics of a song

    Returns: 
        float: Normalized variation, otherwise 0 if no words in the song
    """
    words = lyrics.lower().split()
    total = len(words)
    unique = len(set(words))
    return unique / total if total > 0 else 0


def genre_word_variation(songs_by_genre):
    """
    Calculate the unique word count for each genre by aggregating all lyrics.

    Args:
        songs_by_genre (dict): A dictionary where keys are genres and values are lists of lyrics strings.

    Returns:
        dict: Mapping of genre -> number of unique words across all its lyrics.
    """
    genre_variations = {}
    for genre, lyrics_list in songs_by_genre.items():
        all_text = " ".join(lyrics_list).lower()
        unique_words = set(all_text.split())
        genre_variations[genre] = len(unique_words)
    return genre_variations


def i_vs_you_score(lyrics):
    """
    Measures the point-of-view preference in lyrics by comparing the number of lines
    that begin with 'I' versus those that begin with 'You'.

    Args:
        lyrics (str): The full lyrics of a song.

    Returns:
        int: A score (positive = more "I", negative = more "You")
    """
    lines = [line.strip().lower() for line in lyrics.split("\n") if line.strip()]
    i_count = sum(line.startswith("i ") or line.startswith("i'") for line in lines)
    you_count = sum(line.startswith("you ") or line.startswith("you'") for line in lines)
    return i_count - you_count


def count_word_repetitions(lyrics):
    """
    Count the number of immediate word repetitions in a song.
    For example, "good good" is one repetition.

    Args:
        lyrics (str): The full lyrics of a song.

    Returns:
        int: Number of repeated word sequences.
    """
    words = re.findall(r'\b\w+\b', lyrics.lower())
    count = 0
    i = 1  # Start from index 1 to compare with previous word
    while i < len(words):
        rep = 0
        while i < len(words) and words[i] == words[i - 1]:
            rep += 1
            i += 1
        count += rep
        i += 1
    return count

def compute_cosine_similarity(lyrics1, lyrics2):
    """
    Compute the cosine similarity between two text inputs.
    
    Args:
        text1 (str): First lyrics or text.
        text2 (str): Second lyrics or text.
    
    Returns:
        float: Cosine similarity score (0 to 1).
    """
    vectorizer = CountVectorizer().fit([lyrics1, lyrics2])
    vectors = vectorizer.transform([lyrics1,lyrics2])
    sim = cosine_similarity(vectors[0], vectors[1])[0][0]
    return sim